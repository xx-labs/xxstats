version: '3.7'

services:
  #
  # Blockchain archive node
  #
  substrate-node:
    image: substrate-node
    hostname: substrate-node
    build:
      context: ./substrate-node
      args:
        XXNETWORK_VERSION: v0.2.5-1
    volumes:
      - 'substrate-data:/data'
    ports:
      - '15974:15974'
      - '9933:9933'
      - '9944:9944'
      - '9615:9615'
    command: --base-path /data --name xxstats --port 15974 --ws-port 9944 --rpc-port 9933 --rpc-cors all --unsafe-ws-external --unsafe-rpc-external --pruning archive --prometheus-external
    restart: always
  #
  # SQL data base
  #
  postgres:
    image: postgres:14
    restart: always
    shm_size: 1gb
    volumes:
      - 'db-data:/var/lib/postgresql/data'
      - '../sql/backend.sql:/docker-entrypoint-initdb.d/backend.sql'
    environment:
      POSTGRES_USER: 'xxstats'
      POSTGRES_PASSWORD: 'xxstats'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U xxstats']
      interval: 5s
      timeout: 5s
      retries: 5
    # 
    # https://pgtune.leopard.in.ua/#/
    #
    # Optimized for:
    #
    # DB Version: 14
    # OS Type: linux
    # DB Type: web
    # Total Memory (RAM): 64 GB
    # CPUs num: 12
    # Connections num: 200
    # Data Storage: ssd

    command:
      - "postgres"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=16GB"
      - "-c"
      - "effective_cache_size=48GB"
      - "-c"
      - "maintenance_work_mem=2GB"
      - "-c"
      - "checkpoint_completion_target=0.9"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "default_statistics_target=100"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "effective_io_concurrency=200"
      - "-c"
      - "work_mem=20971kB"
      - "-c"
      - "min_wal_size=1GB"
      - "-c"
      - "max_wal_size=4GB"
      - "-c"
      - "max_worker_processes=12"
      - "-c"
      - "max_parallel_workers_per_gather=4"
      - "-c"
      - "max_parallel_workers=12"
      - "-c"
      - "max_parallel_maintenance_workers=4"
      - "-c"
      - "password_encryption=md5"

  #
  # Hasura
  #
  graphql-engine:
    image: hasura/graphql-engine:v1.3.3.cli-migrations-v2
    ports:
      - '8082:8080'
    volumes:
      - '../hasura/metadata:/hasura-metadata'
    depends_on:
      - 'postgres'
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: 'postgres://xxstats:xxstats@postgres:5432/xxstats'
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true' # set to 'false' to disable console
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: 'startup, http-log, webhook-log, websocket-log, query-log'
      HASURA_GRAPHQL_CORS_DOMAIN: http://localhost:3000, https://dev.xx-network.polkastats.io, https://xx.polkastats.io
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
  
  #
  # Block crawler
  #
  crawler:
    image: crawler:latest
    build:
      context: ../
      dockerfile: ./docker/crawler/Dockerfile
    depends_on:
      - 'postgres'
      - 'substrate-node'
    restart: always
    environment:
      NODE_ENV: 'production'
      NODE_OPTIONS: '--max-old-space-size=8192'
      WS_PROVIDER_URL: 'ws://substrate-node:9944'
      DASHBOARD_API_URL: 'https://dashboard-api.xx.network/v1/nodes'
      SUBSTRATE_NETWORK: 'xx-network'
      # RANKING_DISABLE: 'true'
      # ACTIVE_ACCOUNTS_DISABLE: 'true'
      # BLOCK_LISTENER_DISABLE: 'true'
      # BLOCK_FINALIZER_DISABLE: 'true'
      # BLOCK_HARVESTER_DISABLE: 'true'
      NODE_PG_FORCE_NATIVE: 'true'
      #
      #   Available modes:
      #
      #   chunks:     Process batchs of 'BLOCK_HARVESTER_CHUNK_SIZE' blocks in parallel (faster)
      #   sequential: Slower but less resource-intensive
      #
      BLOCK_HARVESTER_MODE: 'chunks'
      BLOCK_HARVESTER_CHUNK_SIZE: '10'
      BACKEND_STATS_PRECISION: '2'
      LOG_LEVEL: 'debug'
      BLOCK_HARVESTER_START_DELAY_MS: '120000' # 2 min
      BLOCK_FINALIZER_START_DELAY_MS: '30000'  # 30 sec
      RANKING_START_DELAY_MS: '60000'          # 1 min
      ACTIVE_ACCOUNTS_START_DELAY_MS: '180000' # 3 min
      ACTIVE_ACCOUNTS_CHUNK_SIZE: '100'
      SENTRY_DSN: ${SENTRY_DSN}

  #
  # API
  #
  api:
    image: api:latest
    ports:
      - '8000:8000'
    build:
      context: ../../api
      dockerfile: Dockerfile
    depends_on:
      - 'postgres'
    restart: always
    environment:
      - NODE_ENV=production
      - NODE_PORT=8000

#
# Persistent volumes
#
volumes:
  db-data: {}
  substrate-data: {}
